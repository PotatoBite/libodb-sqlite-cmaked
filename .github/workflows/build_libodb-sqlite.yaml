name: build_libodb-sqlite

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

  build_windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        path: libodb-sqlite

    - name: Checkout tools repo
      uses: actions/checkout@v2
      with:
        repository: PotatoBite/libodb
        path: libodb
    
    #- name: Install Qt
    #  uses: jurplel/install-qt-action@v2
    #  with:
    #    version: '5.15.2'
        #host: 'windows'
   #     target: 'desktop'
   #     install-deps: 'true'
   #     cached: 'false'
   #     setup-python: 'false'

    - name: Create Build Environment for libodb
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/libodb/build

    - name: Configure CMake for libodb
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake -S libodb -B libodb/build -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build libodb
      #working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build libodb/build --config $BUILD_TYPE --target install

    - name: Create Build Environment for libodb-sqlite
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/libodb-sqlite/build

    - name: Configure CMake for libodb-sqlite
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake -S libodb-sqlite -B libodb-sqlite/build -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build libodb-sqlite
      #working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build libodb-sqlite/build --config $BUILD_TYPE --target install
    
    - uses: djnicholson/release-action@v2.11
      with:
        token: ${{ secrets.SECRET_4_PUBLISH }}
        asset-name: 'libodb-sqlite.lib'
        release-name: 'Static release'
        tag-name: 'v2.4.0-static'
        file: 'C:/Program Files (x86)/libodb-sqlite/lib/libodb-sqlite.lib'
